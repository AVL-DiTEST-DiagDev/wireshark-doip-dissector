version: '0.0.1-{build}'

clone_folder: c:\projects\ws-plugin

environment:
  CYG_ROOT: C:\cygwin64

# script after cloning repo:
install:
  - echo Install Script now!
  - mkdir c:\own-download
  - cd c:\own-download
  # Download winflexbison and add to PATH:
  - appveyor DownloadFile http://darki2002.bplaced.net/amos/win_flex_bison-2.5.5.zip
  - 7z x win_flex_bison-2.5.5.zip
  - set Path=c:\own-download\win_flex_bison-2.5.5;%Path%

platform:
  - x64
  
before_build:
  - echo BeforeBuild Script now!
  # add Cygwin to PATH
  - set PATH=%PATH%;C:\cygwin64\bin\
  - set PATH=C:\cygwin64\bin\;%PATH%
  - mkdir c:\projects\wireshark
  # get Wireshark and checkout the Branch vor Stable Version 2.0.x
  - git clone https://github.com/wireshark/wireshark.git c:\projects\wireshark
  - cd c:\projects\wireshark
  - git checkout master-2.0
  # set necessary environment variables: 
  - cmd: set CYGWIN=nodosfilewarning
  - cmd: set WIRESHARK_BASE_DIR=c:\projects
  - cmd: set WIRESHARK_TARGET_PLATFORM=win64
  - cmd: set QT5_BASE_DIR=c:\Qt\5.6\msvc2013
  - cmd: set WIRESHARK_VERSION_EXTRA=-YourExtraVersionInfo
  # insert our pluginfiles to wireshark
  - cmd: xcopy /E c:\projects\ws-plugin\src\plugins plugins
  # insert scripts for option adjustment and adding doip to CMakeLists.txt
  - cmd: copy /Y c:\projects\ws-plugin\build_win\* .
  # run the adjustment scripts
  - bash ./add_doip_cmake.sh
  - bash ./option_disabler.sh
  - ps: Invoke-WebRequest -Uri https://cygwin.com/setup-x86_64.exe -OutFile c:\projects\cygwin-setup.exe
  - mkdir c:\projects\cyg-packages
  - c:\projects\cygwin-setup.exe -q -n -N -d -R C:\cygwin64 -s http://ftp.hawo.stw.uni-erlangen.de/cygwin/ -l c:\projects\cyg-packages -P  flex -P bison
  - cmd: set WIRESHARK_CYGWIN_INSTALL_PATH=C:\cygwin64

build_script:
  - echo Build Script now!
  - mkdir c:\projects\wiresharkBuild
  - cd  c:\projects\wiresharkBuild
  - cmake -DENABLE_CHM_GUIDES=on -G "Visual Studio 12 Win64" c:\projects\wireshark
  -  msbuild /m /p:Configuration=RelWithDebInfo c:\projects\wiresharkBuild\plugins\doip\doip.vcxproj

after_build:
# Push latest doip.dll with build number as zip
  - ps: cp c:\projects\wiresharkBuild\run\RelWithDebInfo\plugins\doip.dll c:\projects\doip_build$env:appveyor_build_number.dll
  - dir c:\projects
  - ps: $env:appveyor_build_number
  - ps: 7z a c:\projects\doip_latest.zip c:\projects\doip_build$env:appveyor_build_number.dll
  - dir c:\projects
  - ps: Push-AppveyorArtifact c:\projects\doip_latest.zip

# Prepare for deployment of candidate and release
  - ps: cp c:\projects\doip_build$env:appveyor_build_number.dll c:\projects\doip_candidate_build$env:appveyor_build_number.dll
  - dir c:\projects
  - ps: 7z a c:\projects\doip_candidate.zip c:\projects\doip_candidate_build$env:appveyor_build_number.dll
  - ps: cp c:\projects\doip_build$env:appveyor_build_number.dll c:\projects\doip_release_build$env:appveyor_build_number.dll
  - dir c:\projects
  - ps: 7z a c:\projects\doip_release.zip c:\projects\doip_release_build$env:appveyor_build_number.dll

# Push doip.dll with build number as zip for release candidate or release
  - ps: if($env:APPVEYOR_REPO_TAG) {
      if($env:APPVEYOR_REPO_TAG_NAME -match "candidate") {
        Push-AppveyorArtifact c:\projects\doip_candidate.zip;
        $env:doipcandidate = $true
      }
      elseif ($env:APPVEYOR_REPO_TAG_NAME -match "release")  {
        Push-AppveyorArtifact c:\projects\doip_release.zip;
        $env:doiprelease = $true
      } }
    
on_failure:
  - echo FAILURE! Nothing will be done.

#deploy:
#- provider: Environment
#  name: ftp-latest

#- provider: Environment
#  name: ftp-candidate
#  on:
#    doipcandidate: true

#- provider: Environment
#  name: ftp-release
#  on:
#    doiprelease: true
